$#include "coord.h"
$#include "dim2.h"

$#include "decimal-round.h"
$#include "point.h"

/// Cartesian point.
class Point {

    inline Point();

    inline Point(Coord x, Coord y);

    inline Point(NRPoint const &p);

    inline Point(Point const &p);

//    inline Point &operator=(Point const &p);

//    inline Coord operator[](unsigned i) const;
//    inline Coord &operator[](unsigned i);

    /** Return a point like this point but rotated -90 degrees.
        (If the y axis grows downwards and the x axis grows to the
        right, then this is 90 degrees counter-clockwise.)
    **/
    Point ccw() const;

    /** Return a point like this point but rotated +90 degrees.
        (If the y axis grows downwards and the x axis grows to the
        right, then this is 90 degrees clockwise.)
    **/
    Point cw() const;

    /**
        \brief A function to lower the precision of the point
        \param  places  The number of decimal places that should be in
                        the final number.
    */
    inline void round (int places = 0);

    void normalize();

//    inline Point &operator+=(Point const &o);
  
//    inline Point &operator-=(Point const &o);
  
//    inline Point &operator/=(double const s);

//    inline Point &operator*=(double const s);

//    Point &operator*=(Matrix const &m);

//    inline int operator == (const Point &in_pnt);
};

/*
  Local Variables:
  mode:c++
  c-file-style:"stroustrup"
  c-file-offsets:((innamespace . 0)(inline-open . 0)(case-label . +))
  indent-tabs-mode:nil
  fill-column:99
  End:
*/
// vim: filetype=cpp:expandtab:shiftwidth=4:tabstop=8:softtabstop=4:encoding=utf-8:textwidth=99 :
